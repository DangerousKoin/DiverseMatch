{"version":3,"sources":["components/ErrorMessage/ErrorMessage.jsx","utils/tokenService.js","utils/userService.js","pages/SignupPage/SignupPage.jsx","pages/LoginPage/LoginPage.jsx","components/ProfileBio/ProfileBio.jsx","components/TopicCard/TopicCard.js","components/TopicFeed/TopicFeed.jsx","utils/topicService.js","components/Search/Search.jsx","components/Header/Header.jsx","components/AddTopicForm/AddTopicForm.jsx","pages/ProfilePage/ProfilePage.jsx","pages/Feed/Feed.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["ErrorMessage","props","className","error","getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","setToken","setItem","removeToken","getUserFromToken","user","BASE_URL","signup","fetch","method","body","then","res","ok","json","Error","tokenService","getUser","logout","login","creds","headers","Headers","stringify","getProfile","username","SignUpPage","useState","invalidForm","setError","selectedFile","setSelectedFile","password","passwordConf","state","setState","history","useHistory","handleChange","e","target","name","value","a","key","preventDefault","formData","FormData","append","userService","handleSignUpOrLogin","push","console","log","message","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Header","as","color","Image","src","Form","autoComplete","onSubmit","Segment","stacked","Input","placeholder","onChange","required","type","Field","files","Button","disabled","LoginPage","requiredss","fluid","size","Message","to","ProfileBio","handleLogout","columns","Row","avatar","vertical","onClick","TopicCard","topic","Card","minWidth","Content","fontSize","display","whiteSpace","padding","border","borderRadius","backgroundColor","floated","icon","title","description","_id","TopicFeed","topics","isProfile","numPhotosCol","Group","itemsPerRow","stackable","map","create","Search","setTopics","data","keyword","searchResults","PageHeader","clearing","float","width","AddTopicForm","handleAddTopic","ProfilePage","profileUser","setProfileUser","loading","setLoading","location","useLocation","pathname","substring","topicsAPI","useEffect","Loader","active","centered","Feed","App","setUser","exact","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.84e4a181.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function ErrorMessage(props){\n    return <span className={\"error\"}>{props.error}</span>\n}","function setToken(token) {\n    if (token) {\n      // localStorage is given to us by the browser\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }\n  \n  function getToken() {\n    let token = localStorage.getItem('token');\n    if (token) {\n      // Check if expired, remove if it is\n      // atob is a function that decodes a base-64 string\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      // JWT's exp is expressed in seconds, not milliseconds, so convert\n      if (payload.exp < Date.now() / 1000) {\n        localStorage.removeItem('token');\n        token = null;\n      }\n    }\n    return token;\n  }\n  \n  function getUserFromToken() {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n  }\n  \n  function removeToken() {\n    localStorage.removeItem('token');\n  }\n  \n  export default {\n    setToken,\n    getToken,\n    removeToken,\n    getUserFromToken\n  };","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    body: user\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    // Probably a duplicate username\n    throw new Error('Username already taken!');\n  })\n  // Parameter destructuring!\n  .then(({token}) => tokenService.setToken(token));\n  // Setting our token in localStorage in our browser\n  // then we'll be able to use with every request!\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error('Bad Credentials!');\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\nfunction getProfile(username){\n  return fetch(BASE_URL + username, {\n    headers: {\n      'Authorization': 'Bearer ' + tokenService.getToken()\n    }\n  }).then(res => {\n    if(res.ok) return res.json()\n    throw new Error('User does not exist') // This is the error in our try catch(err)\n  })\n}\n\nexport default {\n  signup, \n  getUser,\n  logout,\n  login,\n  getProfile\n};","import React, { useState } from 'react';\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\nimport { Button, Form, Grid, Header, Image, Segment } from 'semantic-ui-react'\nimport userService from '../../utils/userService';\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function SignUpPage(props){\n  const [invalidForm, setValidForm] = useState(false)\n  const [error, setError ] = useState('')\n  const [selectedFile, setSelectedFile] = useState('')\n  const [state, setState]  = useState({\n    username: '',\n    password: '',\n    passwordConf: '',\n  });\n\n  const history = useHistory()\n  \n  function handleChange(e){\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  async function handleSubmit(e){\n    // add this later\n    e.preventDefault();\n\n    // Photos have to be sent over as FormData\n    // They send over the form in multiparts (multipe requests to the server)\n\n    const formData = new FormData();\n    formData.append('photo', selectedFile);\n\n\n    // generating rest of form data by looping over the state object!\n    for (let key in state){\n      formData.append(key, state[key])\n    }\n    //fyi if you log out formData you won't see anything you have to use the folllowing\n\n    // Display the key/value pairs\n    // for (var pair of formData.entries()) {\n    //   console.log(pair[0]+ ', ' + pair[1]); \n    // }\n\n    // SO now we have are data prepared to send over in our formData object\n    try {\n      // refere to the utils/userService, to look at the signup fetch function\n      await userService.signup(formData);\n      // setTheUser in our app\n      props.handleSignUpOrLogin() // gets the token from localstorage and updates the user state in our app.js\n      // with the correct user object from the current token\n      // then route to the homepage\n      history.push('/') // defined above from react-router-dom\n      // after this we can go whereever\n\n    } catch(err){\n      console.log(err.message)\n      setError(err.message)\n    }\n\n  }\n\n  function handleFileInput(e){\n    setSelectedFile(e.target.files[0])\n  }\n    \n    return (\n        <>\n        <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n          <Grid.Column style={{ maxWidth: 450 }}>\n              <Header as='h2' color='teal' textAlign='center'>\n                <Image src='https://photocollector.s3-us-west-2.amazonaws.com/site-images/DiverseMatch_logo.png' /> Sign Up    \n              </Header>            \n                <Form autoComplete=\"off\"  onSubmit={handleSubmit}>\n                <Segment stacked>               \n                    <Form.Input                    \n                      name=\"username\"\n                      placeholder=\"username\"\n                      value={state.username}\n                      onChange={handleChange}\n                      required\n                    />\n                    <Form.Input             \n                      name=\"password\"\n                      type=\"password\"\n                      placeholder=\"password\"\n                      value={ state.password}\n                      onChange={handleChange}\n                      required\n                    />\n                    <Form.Input     \n                      name=\"passwordConf\"\n                      type=\"password\"\n                      placeholder=\"Confirm Password\"\n                      value={ state.passwordConf}\n                      onChange={handleChange}\n                      required\n                    />\n                    <Form.Field> \n                      <Form.Input\n                        type=\"file\"\n                        name=\"photo\"\n                        placeholder=\"upload image\"\n                        onChange={handleFileInput}\n                      />      \n                    </Form.Field>\n                    <Button\n                      type=\"submit\"\n                      className=\"btn\"\n                      disabled={invalidForm}\n                    >\n                    Signup\n                  </Button>\n                  </Segment>\n                  {error ? <ErrorMessage error={error} /> : null}\n                </Form>\n            </Grid.Column>\n          </Grid>\n        </>\n      );   \n    \n}\n","import React, { useState } from 'react';\nimport './LoginPage.css';\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage'\nimport userService from '../../utils/userService';\nimport { useHistory, Link } from 'react-router-dom';\nimport { Button, Form, Grid, Header, Image, Message, Segment } from 'semantic-ui-react'\n\nexport default function LoginPage(props){\n    const [invalidForm, setValidForm] = useState(false);\n    const [error, setError ]          = useState('')\n    const [state, setState]       = useState({\n        username: '',\n        password: '',\n    })\n\n    const history = useHistory();\n    \n    function handleChange(e){\n      setState({\n        ...state,\n        [e.target.name]: e.target.value\n      })\n    }\n   \n    \n\n    async function handleSubmit(e){\n      e.preventDefault()\n              \n      try {\n          await userService.login(state);\n          // Route to wherever you want!\n          props.handleSignUpOrLogin() // \n          history.push('/')\n          \n        } catch (err) {\n          // Invalid user data (probably duplicate email)\n          setError(err.message)\n        }\n    }\n\n    return (\n        <>\n          <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n            <Grid.Column style={{ maxWidth: 450 }}>\n            <Header as='h2' color='teal' textAlign='center'>\n            <Image src='https://photocollector.s3-us-west-2.amazonaws.com/site-images/DiverseMatch_logo.png' /> Log-in to your account\n            </Header>\n            <Form  autoComplete=\"off\"  onSubmit={handleSubmit}>\n               <Segment stacked>\n                  <Form.Input                    \n                    name=\"username\"\n                    placeholder=\"username\"\n                    value={state.username}\n                    onChange={handleChange}\n                    requiredss\n                  />\n                  <Form.Input\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"password\"\n                    value={ state.password}\n                    onChange={handleChange}\n                    required\n                  />\n                <Button\n                  color='teal'\n                  fluid size='large'\n                  type=\"submit\"\n                  className=\"btn\"\n                  disabled={invalidForm}\n                >\n                  Login\n                </Button>\n              </Segment>\n            </Form>\n            <Message>\n              New to us? <Link to='/signup'>Sign Up</Link>\n            </Message>\n            {error ? <ErrorMessage error={error} /> : null}\n            </Grid.Column>\n          </Grid>\n        </>\n      );\n}\n\n","import React from 'react';\nimport {  Image, Grid, Segment } from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\n\n\n\nexport default function ProfileBio({user, handleLogout}) { \n  return (\n  <Grid textAlign='center' columns={2}>\n    <Grid.Row>\n      <Grid.Column>\n        <Image src={`${user.avatar ? user.avatar : \"https://react.semantic-ui.com/images/wireframe/square-image.png\"} `} avatar size='small' />\n      </Grid.Column>\n      <Grid.Column textAlign=\"left\" style={{ maxWidth: 450 }}>\n        <Segment vertical>\n           <h3>{user.username}</h3>\n           <Link to='' onClick={handleLogout}>Logout</Link>\n        </Segment>\n          \n      </Grid.Column>\n    </Grid.Row>\n  </Grid>\n\n  );\n}","import React from 'react';\nimport { Card, Icon, Image, Feed } from 'semantic-ui-react'\n\nfunction TopicCard({topic}) { \n\n  return (\n    <Card style={{ minWidth: 150}} key={topic._id}>\n          <Card.Content style={{ fontSize: 'small', display: 'inline', whiteSpace: 'nowrap', textAlign: 'center', padding: 0}}>\n              <Image\n                  style={{ padding: 2, border: 2, borderRadius: 5, backgroundColor: 'green' }}\n                  floated='left'\n                  size='tiny'\n                  src={topic.icon ? topic.icon : 'https://react.semantic-ui.com/images/wireframe/square-image.png'}\n              />\n          <strong>{topic.title}</strong>\n          <br />\n          {topic.description}\n          \n      \n      </Card.Content>\n    </Card>\n  );\n}\n\nexport default TopicCard;","import React from 'react';\nimport { Card  } from 'semantic-ui-react'\nimport TopicCard from '../TopicCard/TopicCard';\n\n\nexport default function TopicFeed({topics, isProfile, numPhotosCol, user}){\n\n    return (\n        <Card.Group itemsPerRow={numPhotosCol} stackable>\n           \n                {topics.map((topic) => {\n                return ( \n                        <TopicCard topic={topic} key={topic._id} isProfile={isProfile} user={user} />\n                    )\n                })}\n        </Card.Group>\n  \n    )\n}","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/topics/'\n\nexport function create(topic){\n    return fetch(BASE_URL, {\n        method: 'POST',\n        body: topic, // our info from the form\n        headers: {\n            'Authorization': 'Bearer ' + tokenService.getToken()\n        }\n    }).then(res => res.json())\n}\n\nexport function search(keyword){\n  return fetch(BASE_URL + 'search', {\n    method: 'POST',\n    body: keyword,\n    headers: {\n        'Authorization': 'Bearer ' + tokenService.getToken()\n      }\n  }).then(res => res.json())\n}\n\nexport function getAll() {\n    return fetch(BASE_URL, {\n      headers: {\n        'Authorization': 'Bearer ' + tokenService.getToken()\n      }\n    })\n    .then(res => res.json());\n}","import React, { useState } from 'react';\nimport { Button, Form, Segment } from 'semantic-ui-react';\nimport { Card  } from 'semantic-ui-react'\nimport TopicCard from '../TopicCard/TopicCard';\nimport TopicFeed from '../../components/TopicFeed/TopicFeed';\nimport * as topicService from '../../utils/topicService';\nimport userService from '../../utils/userService';\n\n\nexport default function Search(){\n  const [state, setState] = useState({});\n  const [results, setResults] = useState([]);\n  const [topics, setTopics] = useState([])\n\n  \n\n  function handleChange(e){\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  function handleSubmit(e){\n    e.preventDefault()\n    const data = userService.getProfile(e.username);\n    const formData = new FormData()\n    formData.append('title', state.title)\n    setTopics(() => [...data.topics])\n    const searchResults = topicService.search(state.title);\n    console.log(\"component results \", searchResults);\n    \n  }\n  \n  return (\n    <Segment>\n        \n      <Form  autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Form.Input\n            className=\"search-input\"\n            name=\"title\"\n            placeholder=\"Search Topics\"\n            onChange={handleChange}\n            required\n        />\n        <Button\n          type=\"submit\"\n          className=\"btn\"\n        >\n          Search\n        </Button>\n      </Form>\n\n      <TopicFeed isProfile={true} topics={topics} numPhotosCol={1} />\n\n    </Segment>\n  \n  );\n}","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport { Header, Segment, Image, Icon } from 'semantic-ui-react';\n\n\nexport default function PageHeader({user}){\n    return (\n        <Segment clearing >\n            <Header >\n                <Link to=\"/\"><Image style={{ display: 'inline', float: 'left', width: 100 }} src='https://photocollector.s3-us-west-2.amazonaws.com/site-images/DiverseMatch_logo.png' /></Link>\n            \n                <Link to={`/${user.username}`}><Image style={{ display: 'inline', float: 'right', width: 80, height: 80 }} src={user.avatar ? user.avatar : \"https://react.semantic-ui.com/images/wireframe/square-image.png\"} avatar></Image></Link>          \n            </Header>\n        </Segment>\n    )\n}","import React, { useState } from 'react';\n\nimport { Button, Form, Segment } from 'semantic-ui-react'\n\nexport default function AddTopicForm(props){\n  const [selectedFile, setSelectedFile] = useState('')\n  const [state, setState] = useState({\n    description: ''\n  })\n\n  function handleFileInput(e){\n    setSelectedFile(e.target.files[0])\n  }\n\n\n  function handleChange(e){\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  function handleSubmit(e){\n    e.preventDefault()\n             \n    const formData = new FormData()\n    formData.append('photo', selectedFile)\n    formData.append('description', state.description)\n    formData.append('title', state.title)\n    props.handleAddTopic(formData)\n    // Have to submit the form now! We need a function!\n  }\n\n\n  return (\n    \n  \n        <Segment>\n        \n            <Form  autoComplete=\"off\" onSubmit={handleSubmit}>\n\n            <Form.Input\n                  className=\"form-control\"\n                  name=\"title\"\n                  value={state.title}\n                  placeholder=\"topic title\"\n                  onChange={handleChange}\n                  required\n              />\n              <Form.Input\n                  className=\"form-control\"\n                  name=\"description\"\n                  value={state.description}\n                  placeholder=\"topic description\"\n                  onChange={handleChange}\n                  required\n              />   \n              <Form.Input\n                className=\"form-control\"\n                type=\"file\"\n                name=\"photo\"\n                placeholder=\"upload image\"\n                onChange={handleFileInput}\n              />   \n              <Button\n                type=\"submit\"\n                className=\"btn\"\n              >\n                ADD TOPIC\n              </Button>\n            </Form>\n          </Segment>\n     \n   \n  ); \n}","import React, { useState, useEffect } from 'react';\nimport { Grid, Loader } from 'semantic-ui-react'\nimport userService from '../../utils/userService';\nimport ProfileBio from '../../components/ProfileBio/ProfileBio';\nimport TopicFeed from '../../components/TopicFeed/TopicFeed';\nimport Search from '../../components/Search/Search';\nimport PageHeader from '../../components/Header/Header';\nimport { useLocation } from 'react-router-dom';\nimport AddTopicForm from '../../components/AddTopicForm/AddTopicForm';\nimport * as topicsAPI from '../../utils/topicService';\n\nexport default function ProfilePage({ user, handleLogout }) {\n\n    const [topics, setTopics] = useState([])\n    const [profileUser, setProfileUser] = useState({})\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState('')\n\n    const location = useLocation()\n    console.log(location)\n\n    async function getProfile() {\n\n        try {\n\n            const username = location.pathname.substring(1)\n            \n            // location.pathname returns /jimbo so we need to cut off the / using the js method substring\n            // This gets the username from the url! \n            console.log(\"ProfilePage username\", username)\n            const data = await userService.getProfile(username);\n            console.log(\"ProfilePage data\", data)\n            setLoading(() => false)\n            setTopics(() => [...data.topics])\n            setProfileUser(() => data.user)\n        } catch (err) {\n            console.log(err)\n            setError(err)\n        }\n    }\n\n\n    useEffect(() => {\n        getProfile()\n    }, [])\n\n    async function handleAddTopic(topic){\n\n        const data = await topicsAPI.create(topic);\n\n        // to check to make sure this is working\n        console.log(data, ' data')\n        // after this we'll want to update state\n        // after we get back our new topic\n        // data is the response from our create function in controllers/topics\n        // update the state\n\n        setTopics([data.topic,  ...topics])\n        // to conifrm this check the devtools for your feed component\n        \n    }\n\n\n    return (\n\n        <>\n            { loading ?\n                <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle' >\n                        <Grid.Column style={{ maxWidth: 450}}>\n                                <Loader size='large' active>Loading</Loader>\n                        </Grid.Column>\n                </Grid>\n                :\n                <Grid>\n                    <Grid.Column style={{ minWidth: 260, maxWidth: '40%',  }}>\n\n                        <Grid.Row centered>\n                            <PageHeader user={user} />\n                        </Grid.Row>\n                        \n                        <Grid.Row centered>\n                        <h2>Find Interests:</h2>\n                            <Search />\n                        \n                            <TopicFeed isProfile={true} topics={topics} numPhotosCol={1} user={user} />\n                        </Grid.Row>\n                        \n                    </Grid.Column>\n\n                    <Grid.Column  style={{ width: '60%' }}>\n                        <Grid.Row>\n                            <ProfileBio user={profileUser} handleLogout={handleLogout} />\n                            \n                        </Grid.Row>\n                        \n                        <Grid.Row>\n                            <Grid.Column>\n                                <AddTopicForm handleAddTopic={handleAddTopic}/>\n                            </Grid.Column>\n                        </Grid.Row>\n\n                        <Grid.Row >\n                        <h2>Added Topics:</h2>\n                            <TopicFeed isProfile={true} topics={topics} numPhotosCol={1} user={user} />\n                        </Grid.Row>\n\n                    </Grid.Column>\n                </Grid>\n            }\n        </>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport PageHeader from '../../components/Header/Header';\nimport TopicFeed from '../../components/TopicFeed/TopicFeed';\nimport AddTopicForm from '../../components/AddTopicForm/AddTopicForm';\nimport * as topicsAPI from '../../utils/topicService';\nimport {  Grid, Loader } from 'semantic-ui-react'\nimport ProfileBio from '../../components/ProfileBio/ProfileBio';\nimport Search from '../../components/Search/Search';\n\n\nexport default function Feed({user, handleLogout}){  \n\n\n    return (\n\n       <Grid>\n          <Grid.Column style={{ minWidth: 250}}>\n              <Grid.Row centered>\n                  <PageHeader user={user}  />\n              </Grid.Row>\n\n              <Grid.Row centered>\n                        <h2>Find Matches!</h2>\n                            <Search />\n                        \n          \n                        </Grid.Row>\n\n        </Grid.Column>\n        <Grid.Column style={{ minWidth: 350}}>\n          <ProfileBio user={\"\"} />\n          Need to make user cards!\n        </Grid.Column>\n      </Grid>\n     \n        \n\n\n\n    )\n}","import React, {useState} from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport SignupPage from '../SignupPage/SignupPage';\nimport LoginPage from '../LoginPage/LoginPage';\nimport ProfilePage from '../ProfilePage/ProfilePage'\nimport userService from '../../utils/userService'\nimport Feed from '../Feed/Feed';\n\nfunction App() {\n\n  const [user, setUser] = useState(userService.getUser()) // getUser decodes our JWT token, into a javascript object\n  // this object corresponds to the jwt payload which is defined in the server signup or login function that looks like \n  // this  const token = createJWT(user); // where user was the document we created from mongo\n\n  function handleSignUpOrLogin(){\n    setUser(userService.getUser()) // getting the user from localstorage decoding the jwt\n  }\n\n  function handleLogout(){\n    userService.logout();\n    setUser({user: null})\n  }\n\n  return (\n    <div className=\"App\">\n      <Switch>\n          <Route exact path=\"/login\">\n             <LoginPage handleSignUpOrLogin={handleSignUpOrLogin}/>\n          </Route>\n          <Route exact path=\"/signup\">\n             <SignupPage handleSignUpOrLogin={handleSignUpOrLogin}/>\n          </Route>\n          {userService.getUser() ? \n            <>\n                <Route exact path=\"/\">\n                    <Feed user={user} handleLogout={handleLogout}/>\n                </Route>\n                <Route path=\"/:username\">\n                  <ProfilePage user={user} handleLogout={handleLogout}/>\n                </Route>\n            </>\n            :\n            <Redirect to='/login'/>\n          }\n  \n      </Switch>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router><App/></Router>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}